runtime! pluginrc.vim

syntax on
" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") |
				\	exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
	filetype plugin indent on
endif

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=2		" more powerful backspacing

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
set hidden		" Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)

set hlsearch " turns on search highlighting
set tags=./tags;/
set t_Co=256
set laststatus=2 " For powerline always show
set wildmenu
set autoindent
set smartindent
set smarttab
set expandtab

" termguicolors not working
" if (has("termguicolors"))
"         set termguicolors
" endif

set t_8b=^[[48;2;%lu;%lu;%lum
set t_8f=^[[38;2;%lu;%lu;%lum

if !&scrolloff
	set scrolloff=1
endif
if !&sidescrolloff
	set sidescrolloff=5
endif
set display+=lastline

set fencs=ucs-bom,utf-8,default,latin1,gb18030,cp936,big5

" Use system clipboard
vnoremap <S-Del> "+x
vnoremap <C-X> "+x
vnoremap <C-Insert> "+y
vnoremap <C-C> "+y
map <silent> <S-Insert> "+gP
imap <silent> <C-V> <ESC>"+gPa
cmap <silent> <C-V> <C-R>+

" let mapleader = "\<Space>"

" Easier to switch window
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l

" Easier to switch buffer
set switchbuf=usetab,newtab
map gn :bn<cr>
map gp :bp<cr>
map gd :bd<cr>
nnoremap <C-TAB> :sbnext<CR>
nnoremap <C-S-TAB> :sbprevious<CR>

" Open file explorer
map ge :Texplore<CR>

" Open buffer explorer
map gb :BufExplorer<CR>

" Man
runtime ftplugin/man.vim
nnoremap K :Man <cword><cr>

" Some people like the visual feedback shown in the status line
" by the following alternative for your vimrc
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set noshowmode " already displayed in status line

" Toggle line number
nmap <C-N><C-N> :setlocal invnumber<CR>

" Toggle background
map <Leader>b :let &background = ( &background == "dark"? "light" : "dark" )<CR>

" Go back and forth as like in browser with mouse
nnoremap <X1Mouse> <C-O>
nnoremap <X2Mouse> <C-I>

if has("autocmd")
	autocmd BufEnter,BufWrite,FileType c,cpp,python,sh,java,javascript,perl,ruby,php,make,vim,go
				\ setlocal number | setlocal cursorline
	autocmd VimEnter,FileType * call PluginSetup()
	" autocmd BufEnter,FileType c,cpp,python,sh,java,javascript,perl,ruby,php,vim nested TagbarOpen
	" autocmd FilterWritePre * nested if &diff | TagbarClose
	autocmd BufReadPost * DetectIndent 
endif

function! PluginSetup()
	if exists(":TagbarToggle")
		let g:tagbar_width = 40
		let g:tagbar_zoomwidth = 0
		let g:tagbar_autoclose = 1
		let g:tagbar_autofocus = 1
		let g:tagbar_sort = 0
		let g:tagbar_compact = 1
		let g:tagbar_indent = 1
		nnoremap <silent> <F7> :TagbarToggle<CR>
		nnoremap tt :TagbarToggle<CR>
	endif
	if exists(":NERDTreeToggle")
		let g:NERDTreeWinSize=40 "设置 NERDTree 子窗口宽度
		let g:NERDTreeWinPos="left" "设置 NERDTree 子窗口位置
		let g:NERDTreeShowBookmarks = 1
		let g:NERDTreeQuitOnOpen = 1
		let g:NERDTreeMinimalUI = 1
		let g:NERDTreeAutoCenterThreshold = 8
		let g:NERDTreeNaturalSort = 1
		let g:NERDTreeChDirMode = 2
		" let g:NERDTreeMouseMode = 2
		let g:NERDTreeShowIgnoredStatus = 0 " for nerdtree git plugin
		nnoremap <silent> <F6> :NERDTreeToggle<CR>
		nnoremap tf :NERDTreeToggle<CR>
	endif
	if exists(":Grepper")
		" When search with git, search from top level of the repository
		"let g:grepper.git =
		"\ { 'grepprg': 'git grep -nI $* -- `git rev-parse --show-toplevel`' }
		nmap gs <plug>(GrepperOperator)
		xmap gs <plug>(GrepperOperator)
		nnoremap <leader>*  :Grepper -tool ag -cword -noprompt<cr>
	endif
	if exists(":YcmCompleter")
		let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
		let g:ycm_autoclose_preview_window_after_completion = 1
		let g:ycm_autoclose_preview_window_after_insertion = 1
		let g:ycm_key_invoke_completion = '<C-Tab>'
		nnoremap <C-I> :YcmCompleter GoTo<CR>
		nnoremap <Leader>g :YcmCompleter GoToDefinition<CR>
		nnoremap <Leader>r :YcmCompleter GoToReferences<CR>
		nnoremap <Leader>h :YcmCompleter GoToInclude<CR>
		nnoremap <Leader>t :YcmCompleter GetType<CR>
		nnoremap <Leader>m :YcmCompleter GetDoc<CR>
		nnoremap <Leader>f :YcmCompleter FixIt<CR>
		nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
	endif
	" if exists(":IndentGuidesToggle")
		"let g:indent_guides_enable_on_vim_startup=1 " 随 vim 自启动
		" let g:indent_guides_start_level=2 "从第二层开始可视化显示缩进
		" let g:indent_guides_guide_size=1 " 色块宽度
		" 快捷键 i 开/关缩进可视化
		" nmap <silent> <Leader>i <Plug>IndentGuidesToggle
	" endif
	if exists(":IndentLinesToggle")
		let g:indentLine_fileType = [ 'c', 'cpp', 'python', 'go', 'sh', 'make', 'spec', 'vim', 'yaml', 'json',
					\ 'perl', 'java', 'javascript', 'lua', 'php', 'tcl', 'ruby' ]
		let g:indentLine_char = '┊'
		let g:indentLine_bufTypeExclude = ['help', 'terminal', 'quickfix']
		let g:indentLine_bufNameExclude = ['_.*', 'NERD_tree.*']
		nmap <silent> <Leader>i :IndentLinesToggle<CR>
		nmap <silent> <Leader>l :LeadingSpaceToggle<CR>
	endif
endfunction


" air-line
let g:airline_powerline_fonts = 1
"let g:Powerline_symbols = 'fancy'
let g:airline#extensions#tabline#enabled = 1

"set statusline=%{fugitive#statusline()} " fugitive status
command! Gtdiff tabedit %|Gvdiff " git diff in tab

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" auto cd
let g:rooter_change_directory_for_non_project_files = 'current'
let g:rooter_use_lcd = 1
let g:rooter_silent_chdir = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'both'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_c = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" No nesting
let g:NERDDefaultNesting = 0


let g:ctrlp_cmd = 'CtrlPMRU' " MRU file list as ctrlp default
let g:ctrlp_by_filename = 1 " Search by file name instead of full path

let g:python_highlight_all = 1 " python-syntax

let g:ycm_confirm_extra_conf = 0

" grepper
runtime plugin/grepper.vim    " initialize g:grepper with default values
" let g:grepper.tools     = ['git', 'ag', 'grep']
let g:grepper.highlight = 1
" let g:grepper.simple_prompt = 1
let g:grepper.dir = 'repo,filecwd'

let g:detectindent_preferred_indent = 4 " specify a preferred indent level when no detection is possible

let g:onedark_terminal_italics = 1

let g:signify_realtime = 1
set updatetime=250

if !has("gui_running")
	try
		" let g:PaperColor_Theme_Options = {
		"             \   'theme': {
		"             \     'default': {
		"             \       'transparent_background': 1
		"             \     }
		"             \   }
		"             \ }
		" let g:airline_theme = 'papercolor'
		" colorscheme PaperColor
		let g:airline_theme = 'solarized'
		let g:solarized_enable_extra_hi_groups = 1
		let g:solarized_statusline = 'low'
		let g:solarized_termtrans = 1
		colorscheme solarized8
	catch /^Vim\%((\a\+)\)\=:E185/
		" Fallback to desert
		let g:airline_theme = 'dark'
		colorscheme desert
	endtry
endif

source $HOME/.vimrc.local
