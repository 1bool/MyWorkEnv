# Set up the prompt
# autoload -Uz promptinit
# promptinit
# prompt adam1

setopt histignorealldups sharehistory

# Keep 10000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=$HISTSIZE
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  #alias dir='dir --color=auto'
  #alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
else export CLICOLOR=1
fi

function dirdiff()
{
    # Shell-escape each path:
    DIR1=$(printf '%q' "$1"); shift
    DIR2=$(printf '%q' "$1"); shift
    vim $@ -c "DirDiff $DIR1 $DIR2"
}

if [ -r /usr/share/powerlevel9k/powerlevel9k.zsh-theme ]; then
  source /usr/share/powerlevel9k/powerlevel9k.zsh-theme
fi

# powerline-go
function powerline_precmd() {
  PS1="$($GOPATH/bin/powerline-go -east-asian-width -hostname-only-if-ssh -error $? -jobs ${${(%):%j}:-0})"

  # Uncomment the following line to automatically clear errors after showing
  # them once. This not only clears the error for powerline-go, but also for
  # everything else you run in that shell. Don't enable this if you're not
  # sure this is what you want.

  #set "?"
}

function install_powerline_precmd() {
  for s in "${precmd_functions[@]}"; do
    if [ "$s" = "powerline_precmd" ]; then
      return
    fi
  done
  precmd_functions+=(powerline_precmd)
}

if [ -x $GOPATH/bin/powerline-go ] && [ "$TERM" != "linux" ]; then
  install_powerline_precmd
else
  # powerline python
  POWERLINE_DIR="$(pip show powerline-status 2> /dev/null | fgrep Location | cut -d" " -f2)"
  [ -z "$POWERLINE_DIR" ] && POWERLINE_DIR='.local/lib/python2.6/site-packages'
  if [ -r $POWERLINE_DIR/powerline/bindings/zsh/powerline.zsh ]; then
    if [ -x $POWERLINE_DIR/bin/powerline ]; then
      POWERLINE_COMMAND=$POWERLINE_DIR/bin/powerline
    fi
    if [ -x $POWERLINE_DIR/EGG-INFO/scripts/powerline-config ]; then
      POWERLINE_CONFIG_COMMAND=$POWERLINE_DIR/EGG-INFO/scripts/powerline-config
    fi
    . $POWERLINE_DIR/powerline/bindings/zsh/powerline.zsh
  fi
fi
